I have the database stuff (good enough for now) under data,
and the cli implementation under cli, for name generation.

I used yeoman ("yo flask-api") to generate this top level python
for flask in a virtualenv.  See "notes" for the gory details.
I'm nervous about using yeoman for anything now, though, so
we'll see whether I stick with this structure or not.

I'm getting started by following 

the React tutorial: https://facebook.github.io/react/docs/tutorial.html

ToDo Next:

...
3) make the database connection configuration driven (not just "localhost")
4) make the Flask API URI configuration driven (not just "localhost:5000")
5) make an incrementally better layout of name generator 
6) make an incrementally better layout of main SPA page
7) improve this todo list by breaking down into stories/features
N) see if I can generate part of the code for the names page using goodwin

ToDo Cleaning Up The Projects:

1) list all files, and visit each one
  a) delete dead ends, except a note in documentation
  b) clean up, move, and rename things to make a clean structure
  c) explain the project structure, the goals, and status

Things NOT To Do:

1) avoid adding my own login / authentication - this can be a giant time sink
  a) focus on getting something fun and useful using a local database
  b) once everything else is working, THEN see about adding logins, etc.
  c) I had a brainstorm -- why not use a stand-alone microservice for auth and proxy through to it?
    i) I plan to look at this: https://github.com/davidguttman/authentic ?
    ii) I may look at re-doing something like that in python or go

I've started taking a Pluralsight course on Flask, that includes login with authentication,
so perhaps I'll learn a simple way to do that. I'm actually leaning a lot more towards putting
both authentication and session management into external microservices, just to explore 
what that means and how to do it. I've got most of what I would need to do that in golang
already.

I'm trying my 1.2.3 approach:
1) pick the top priority task
2) make it easier to start or resume
3) split it into smaller tasks or do it

Next Steps
  1.1 create story ideas
  1.2 
    1.2.1 make a data+template driven random "mad lib" generator
    1.2.2 find and extract common plot outlines
    1.2.3 make a top-level panel in the SPA page for story idea
  1.3
    1.3.1 start with mad lib generator
      1.3.1.1 look for examples already in python open source
        * the problem with most of these is that they prompt the user,
          while I want something that builds up lists of replacements
          from a database or a yaml/json file
        http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/madlib2.html
        http://pyyaml.org/wiki/PyYAMLDocumentation

